{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marce\\\\OneDrive\\\\Desktop\\\\AllyProgramming\\\\book-recommender\\\\front-end\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport InputSection from './contentSections/InputSection';\nimport OutputSection from './contentSections/OutputSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let AppState = /*#__PURE__*/function (AppState) {\n  AppState[AppState[\"Input\"] = 0] = \"Input\";\n  AppState[AppState[\"Loading\"] = 1] = \"Loading\";\n  AppState[AppState[\"ModelFinished\"] = 2] = \"ModelFinished\";\n  return AppState;\n}({});\nfunction App() {\n  _s();\n  const [bookTitle, setBookTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [appState, setAppState] = useState(AppState.Input);\n  const [recommendations, setRecommendations] = useState([]);\n  const handleSubmit = e => {\n    if (description != '' && bookTitle != '') {\n      setRecommendations([]);\n      setAppState(AppState.Loading);\n      // doKMeans();\n      // doSentenceTransformer();\n      addBookToRecommendations(\"Your recommendation is 1984 written by George Orwell.\");\n      addBookToRecommendations(\"Your recommendation is Animal Farm written by George Orwell.\");\n    } else {\n      alert('A field was empty');\n    }\n  };\n  function handleSetBookTitle(value) {\n    setBookTitle(value);\n  }\n  function handleSetDescription(value) {\n    setDescription(value);\n  }\n  function handleSetState(value) {\n    setAppState(value);\n  }\n  const addBookToRecommendations = async description => {\n    // result = \"Your recommendation is \" + bookRecc['Title'] + \" by \" + bookRecc['Author'] + \". It has a rating of \" + str(bookRecc['average_rating']) + \" stars!\"\n    // result = \"Your next recommendation is \" + mostSimilarBook[1] + \" written by \" + mostSimilarBook[4] + \". Here is the description: \" + mostSimilarBook[0]\n    let newRec = {\n      title: description.substring(description.indexOf('recommendation is ') + 18, description.indexOf(' written ')),\n      author: '',\n      rating: 0,\n      description: description\n    };\n    let bookInformation = await getBookInformation(newRec.title);\n    newRec.rating = bookInformation.averageRating;\n    newRec.author = bookInformation.author[0];\n    setRecommendations([...recommendations].push(newRec));\n    console.log(recommendations);\n    if (recommendations.length == 2) {\n      setAppState(AppState.ModelFinished);\n    }\n  };\n  const doKMeans = async () => {\n    if (bookTitle != '') {\n      let bookInformation = await getBookInformation(bookTitle);\n      let genres = [];\n\n      //get the converted genres\n      const config = {\n        headers: {\n          'Access-Control-Allow-Origin': '*'\n        }\n      };\n      await axios.post(\"http://127.0.0.1:5000/convertGenres\", {\n        input: bookInformation.subjects\n      }, config).then(response => {\n        // console.log(response)\n        genres = response.data;\n      }).catch(er => {\n        console.log(er);\n      });\n\n      //call the actual kmeans maker function\n      // \"http://localhost:5000/kmeans\"\n      axios.post(\"http://127.0.0.1:5000/kmeans\", {\n        book_genres: genres,\n        num_pages: bookInformation.numPages,\n        ratings_count: bookInformation.numRatings,\n        average_rating: bookInformation.averageRating,\n        text_reviews_count: bookInformation.numInteractions\n      }, config).then(response => {\n        console.log(response.data);\n        addBookToRecommendations(response.data);\n      }).catch(er => {\n        console.log(er);\n        addBookToRecommendations(\"Your recommendation is 1984 by George Orwell\");\n      });\n    }\n  };\n  const doSentenceTransformer = async () => {\n    //get the converted genres\n    const config = {\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://127.0.0.1:5000/sentenceTransformer\", {\n      userDescription: description\n    }, config).then(response => {\n      console.log(response.data);\n      addBookToRecommendations(response.data);\n    }).catch(er => {\n      console.log(er);\n    });\n  };\n  const getBookInformation = async searchTerm => {\n    const baseQuery = 'https://openlibrary.org/search.json?title=' + searchTerm;\n    let numPages = 0;\n    let result = null;\n    await fetch(baseQuery).then(response => response.json()).then(async data => {\n      let firstResult = data.docs[0];\n      let workId = firstResult.key;\n      const editionCall = 'https://openlibrary.org' + workId + '/editions.json';\n      await fetch(editionCall).then(response => response.json()).then(data => {\n        let editionEntries = data.entries;\n        let i = 0;\n        while (numPages == 0 && i < editionEntries.length) {\n          let attemptedGrab = editionEntries[i].number_of_pages;\n          if (attemptedGrab) {\n            numPages = attemptedGrab;\n          }\n          i += 1;\n        }\n      });\n      result = {\n        title: firstResult.title_suggest,\n        author: firstResult.author_name,\n        numInteractions: firstResult.readinglog_count,\n        averageRating: firstResult.ratings_average,\n        numRatings: firstResult.ratings_count,\n        description: firstResult.first_sentence,\n        numPages: numPages,\n        subjects: firstResult.subject\n      };\n    });\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fullPage\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"b1\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"b2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Book Recommender!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Praise INGSOC!!! Read What WE Tell You To\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mainContent\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"c1\",\n              children: /*#__PURE__*/_jsxDEV(InputSection, {\n                handleSubmit: handleSubmit,\n                setBookTitle: handleSetBookTitle,\n                setDescription: handleSetDescription,\n                setAppState: handleSetState\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"c2\",\n              children: /*#__PURE__*/_jsxDEV(OutputSection, {\n                appState: appState,\n                recommendations: recommendations\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PZl03ZIXATCst6ondlVrrXOrTEU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","InputSection","OutputSection","jsxDEV","_jsxDEV","AppState","App","_s","bookTitle","setBookTitle","description","setDescription","appState","setAppState","Input","recommendations","setRecommendations","handleSubmit","e","Loading","addBookToRecommendations","alert","handleSetBookTitle","value","handleSetDescription","handleSetState","newRec","title","substring","indexOf","author","rating","bookInformation","getBookInformation","averageRating","push","console","log","length","ModelFinished","doKMeans","genres","config","headers","post","input","subjects","then","response","data","catch","er","book_genres","num_pages","numPages","ratings_count","numRatings","average_rating","text_reviews_count","numInteractions","doSentenceTransformer","userDescription","searchTerm","baseQuery","result","fetch","json","firstResult","docs","workId","key","editionCall","editionEntries","entries","i","attemptedGrab","number_of_pages","title_suggest","author_name","readinglog_count","ratings_average","first_sentence","subject","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/marce/OneDrive/Desktop/AllyProgramming/book-recommender/front-end/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport axios from \"axios\"\r\nimport InputSection from './contentSections/InputSection';\r\nimport OutputSection, { displayedBookFields } from './contentSections/OutputSection';\r\n\r\nexport enum AppState {\r\n  Input, Loading, ModelFinished\r\n}\r\n\r\nexport interface BookInformation {\r\n  title: string,\r\n  author: string[],\r\n  numInteractions: number,\r\n  averageRating: number,\r\n  numRatings: number,\r\n  description: string,\r\n  numPages: number,\r\n  subjects: string[]\r\n}\r\n\r\nfunction App() {\r\n  const [bookTitle, setBookTitle] = useState(\"\")\r\n  const [description, setDescription] = useState(\"\")\r\n  const [appState, setAppState] = useState(AppState.Input)\r\n  const [recommendations, setRecommendations] = useState<displayedBookFields[]>([])\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    if (description != '' && bookTitle != '') {\r\n      setRecommendations([])\r\n      setAppState(AppState.Loading);\r\n      // doKMeans();\r\n      // doSentenceTransformer();\r\n      addBookToRecommendations(\"Your recommendation is 1984 written by George Orwell.\")\r\n      addBookToRecommendations(\"Your recommendation is Animal Farm written by George Orwell.\")\r\n\r\n    } else {\r\n      alert('A field was empty');\r\n\r\n    }\r\n  }\r\n\r\n\r\n  function handleSetBookTitle(value: string) {\r\n    setBookTitle(value)\r\n  }\r\n\r\n  function handleSetDescription(value: string) {\r\n    setDescription(value)\r\n  }\r\n\r\n  function handleSetState(value: AppState) {\r\n    setAppState(value);\r\n  }\r\n\r\n  const addBookToRecommendations = async (description: string) => {\r\n    // result = \"Your recommendation is \" + bookRecc['Title'] + \" by \" + bookRecc['Author'] + \". It has a rating of \" + str(bookRecc['average_rating']) + \" stars!\"\r\n    // result = \"Your next recommendation is \" + mostSimilarBook[1] + \" written by \" + mostSimilarBook[4] + \". Here is the description: \" + mostSimilarBook[0]\r\n    let newRec: displayedBookFields = {\r\n      title: description.substring(description.indexOf('recommendation is ') + 18, description.indexOf(' written ')),\r\n      author: '',\r\n      rating: 0,\r\n      description: description\r\n    };\r\n\r\n    let bookInformation = await getBookInformation(newRec.title) as unknown as BookInformation\r\n    newRec.rating = bookInformation.averageRating\r\n    newRec.author = bookInformation.author[0]\r\n\r\n    setRecommendations([...recommendations].push(newRec))\r\n\r\n    console.log(recommendations)\r\n    if (recommendations.length == 2) {\r\n      setAppState(AppState.ModelFinished);\r\n    }\r\n  }\r\n\r\n\r\n  const doKMeans = async () => {\r\n    if (bookTitle != '') {\r\n      let bookInformation = await getBookInformation(bookTitle) as unknown as BookInformation\r\n      let genres: string[] = []\r\n\r\n      //get the converted genres\r\n      const config = {\r\n        headers: { 'Access-Control-Allow-Origin': '*' }\r\n      };\r\n      await axios\r\n        .post(\"http://127.0.0.1:5000/convertGenres\", {\r\n          input: bookInformation.subjects,\r\n        }, config)\r\n        .then((response) => {\r\n          // console.log(response)\r\n          genres = response.data\r\n        })\r\n        .catch((er) => {\r\n          console.log(er);\r\n        });\r\n\r\n      //call the actual kmeans maker function\r\n      // \"http://localhost:5000/kmeans\"\r\n      axios\r\n        .post(\"http://127.0.0.1:5000/kmeans\", {\r\n          book_genres: genres,\r\n          num_pages: bookInformation.numPages,\r\n          ratings_count: bookInformation.numRatings,\r\n          average_rating: bookInformation.averageRating,\r\n          text_reviews_count: bookInformation.numInteractions\r\n        }, config)\r\n        .then((response) => {\r\n          console.log(response.data)\r\n          addBookToRecommendations(response.data)\r\n        })\r\n        .catch((er) => {\r\n          console.log(er);\r\n          addBookToRecommendations(\"Your recommendation is 1984 by George Orwell\")\r\n\r\n        });\r\n    }\r\n  }\r\n\r\n  const doSentenceTransformer = async () => {\r\n    //get the converted genres\r\n    const config = {\r\n      headers: { 'Access-Control-Allow-Origin': '*' }\r\n    };\r\n    axios\r\n      .post(\"http://127.0.0.1:5000/sentenceTransformer\", {\r\n        userDescription: description\r\n      }, config)\r\n      .then((response) => {\r\n        console.log(response.data)\r\n        addBookToRecommendations(response.data)\r\n\r\n      })\r\n      .catch((er) => {\r\n        console.log(er);\r\n      });\r\n  }\r\n\r\n  const getBookInformation = async (searchTerm: string) => {\r\n    const baseQuery = 'https://openlibrary.org/search.json?title=' + searchTerm\r\n    let numPages: any = 0;\r\n    let result: BookInformation | null = null;\r\n\r\n    await fetch(baseQuery)\r\n      .then(response => response.json())\r\n      .then(async (data) => {\r\n        let firstResult = data.docs[0]\r\n        let workId = firstResult.key\r\n\r\n        const editionCall = 'https://openlibrary.org' + workId + '/editions.json'\r\n        await fetch(editionCall)\r\n          .then(response => response.json())\r\n          .then((data) => {\r\n            let editionEntries = data.entries\r\n            let i = 0\r\n\r\n            while (numPages == 0 && i < editionEntries.length) {\r\n              let attemptedGrab = editionEntries[i].number_of_pages\r\n              if (attemptedGrab) {\r\n                numPages = attemptedGrab\r\n              }\r\n              i += 1\r\n            }\r\n          })\r\n\r\n        result = {\r\n          title: firstResult.title_suggest,\r\n          author: firstResult.author_name,\r\n          numInteractions: firstResult.readinglog_count,\r\n          averageRating: firstResult.ratings_average,\r\n          numRatings: firstResult.ratings_count,\r\n          description: firstResult.first_sentence,\r\n          numPages: numPages,\r\n          subjects: firstResult.subject\r\n        }\r\n      })\r\n\r\n    return result\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='fullPage'>\r\n      <div className='b1'>\r\n        <div className='b2'>\r\n\r\n          <div className=\"App\">\r\n            <h1>\r\n              Book Recommender!\r\n            </h1>\r\n            <h2>\r\n              Praise INGSOC!!! Read What WE Tell You To\r\n            </h2>\r\n            <div className='mainContent'>\r\n              <div className=\"c1\">\r\n                <InputSection handleSubmit={handleSubmit} setBookTitle={handleSetBookTitle} setDescription={handleSetDescription} setAppState={handleSetState} />\r\n              </div>\r\n              <div className='c2'>\r\n                <OutputSection appState={appState} recommendations={recommendations} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}