{"ast":null,"code":"const config = {\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n};\nexport async function getBookInformation(searchTerm) {\n  const baseQuery = 'https://openlibrary.org/search.json?title=' + searchTerm;\n  let numPages = 0;\n  let result = null;\n  await fetch(baseQuery).then(response => response.json()).then(async data => {\n    let firstResult = data.docs[0];\n    let workId = firstResult.key;\n    const editionCall = 'https://openlibrary.org' + workId + '/editions.json';\n    await fetch(editionCall).then(response => response.json()).then(data => {\n      let editionEntries = data.entries;\n      let i = 0;\n      while (numPages == 0 && i < editionEntries.length) {\n        let attemptedGrab = editionEntries[i].number_of_pages;\n        if (attemptedGrab) {\n          numPages = attemptedGrab;\n        }\n        i += 1;\n      }\n    });\n    result = {\n      title: firstResult.title_suggest,\n      author: firstResult.author_name,\n      numInteractions: firstResult.readinglog_count,\n      averageRating: firstResult.ratings_average,\n      numRatings: firstResult.ratings_count,\n      description: firstResult.first_sentence,\n      numPages: numPages,\n      subjects: firstResult.subject\n    };\n  });\n  return result;\n}\nfunction callConvertGenres(genreList) {}","map":{"version":3,"names":["config","headers","getBookInformation","searchTerm","baseQuery","numPages","result","fetch","then","response","json","data","firstResult","docs","workId","key","editionCall","editionEntries","entries","i","length","attemptedGrab","number_of_pages","title","title_suggest","author","author_name","numInteractions","readinglog_count","averageRating","ratings_average","numRatings","ratings_count","description","first_sentence","subjects","subject","callConvertGenres","genreList"],"sources":["C:/Users/marce/OneDrive/Desktop/AllyProgramming/book-recommender/front-end/src/CallHandler.ts"],"sourcesContent":["import axios from \"axios\"\r\n\r\nexport interface BookInformation {\r\n    title: string,\r\n    author: string[],\r\n    numInteractions: number,\r\n    averageRating: number,\r\n    numRatings: number,\r\n    description: string,\r\n    numPages: number,\r\n    subjects: string[]\r\n  }\r\n\r\nconst config = {\r\n    headers: { 'Access-Control-Allow-Origin': '*' }\r\n};\r\n\r\nexport async function getBookInformation(searchTerm: string) {\r\n    const baseQuery = 'https://openlibrary.org/search.json?title=' + searchTerm\r\n    let numPages: any = 0;\r\n    let result: BookInformation | null = null;\r\n\r\n    await fetch(baseQuery)\r\n      .then(response => response.json())\r\n      .then(async (data) => {\r\n        let firstResult = data.docs[0]\r\n        let workId = firstResult.key\r\n\r\n        const editionCall = 'https://openlibrary.org' + workId + '/editions.json'\r\n        await fetch(editionCall)\r\n          .then(response => response.json())\r\n          .then((data) => {\r\n            let editionEntries = data.entries\r\n            let i = 0\r\n\r\n            while (numPages == 0 && i < editionEntries.length) {\r\n              let attemptedGrab = editionEntries[i].number_of_pages\r\n              if (attemptedGrab) {\r\n                numPages = attemptedGrab\r\n              }\r\n              i += 1\r\n            }\r\n          })\r\n\r\n        result = {\r\n          title: firstResult.title_suggest,\r\n          author: firstResult.author_name,\r\n          numInteractions: firstResult.readinglog_count,\r\n          averageRating: firstResult.ratings_average,\r\n          numRatings: firstResult.ratings_count,\r\n          description: firstResult.first_sentence,\r\n          numPages: numPages,\r\n          subjects: firstResult.subject\r\n        }\r\n      })\r\n\r\n    return result\r\n  }\r\n\r\nfunction callConvertGenres(genreList: string[]){\r\n\r\n}\r\n"],"mappings":"AAaA,MAAMA,MAAM,GAAG;EACXC,OAAO,EAAE;IAAE,6BAA6B,EAAE;EAAI;AAClD,CAAC;AAED,OAAO,eAAeC,kBAAkBA,CAACC,UAAkB,EAAE;EACzD,MAAMC,SAAS,GAAG,4CAA4C,GAAGD,UAAU;EAC3E,IAAIE,QAAa,GAAG,CAAC;EACrB,IAAIC,MAA8B,GAAG,IAAI;EAEzC,MAAMC,KAAK,CAACH,SAAS,CAAC,CACnBI,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAAC,MAAOG,IAAI,IAAK;IACpB,IAAIC,WAAW,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;IAC9B,IAAIC,MAAM,GAAGF,WAAW,CAACG,GAAG;IAE5B,MAAMC,WAAW,GAAG,yBAAyB,GAAGF,MAAM,GAAG,gBAAgB;IACzE,MAAMP,KAAK,CAACS,WAAW,CAAC,CACrBR,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAIM,cAAc,GAAGN,IAAI,CAACO,OAAO;MACjC,IAAIC,CAAC,GAAG,CAAC;MAET,OAAOd,QAAQ,IAAI,CAAC,IAAIc,CAAC,GAAGF,cAAc,CAACG,MAAM,EAAE;QACjD,IAAIC,aAAa,GAAGJ,cAAc,CAACE,CAAC,CAAC,CAACG,eAAe;QACrD,IAAID,aAAa,EAAE;UACjBhB,QAAQ,GAAGgB,aAAa;QAC1B;QACAF,CAAC,IAAI,CAAC;MACR;IACF,CAAC,CAAC;IAEJb,MAAM,GAAG;MACPiB,KAAK,EAAEX,WAAW,CAACY,aAAa;MAChCC,MAAM,EAAEb,WAAW,CAACc,WAAW;MAC/BC,eAAe,EAAEf,WAAW,CAACgB,gBAAgB;MAC7CC,aAAa,EAAEjB,WAAW,CAACkB,eAAe;MAC1CC,UAAU,EAAEnB,WAAW,CAACoB,aAAa;MACrCC,WAAW,EAAErB,WAAW,CAACsB,cAAc;MACvC7B,QAAQ,EAAEA,QAAQ;MAClB8B,QAAQ,EAAEvB,WAAW,CAACwB;IACxB,CAAC;EACH,CAAC,CAAC;EAEJ,OAAO9B,MAAM;AACf;AAEF,SAAS+B,iBAAiBA,CAACC,SAAmB,EAAC,CAE/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}